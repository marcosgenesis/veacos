// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bills         Bill[]
}

model VerificationToken {
    id         String   @id @default(uuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Bill {
    id          String        @id @default(uuid())
    title       String
    debtor      String
    isPersonal  Boolean       @default(false)
    installment Installment[]

    created_at DateTime @default(now())
    updated_at DateTime @default(now())

    User     User?      @relation(fields: [userId], references: [id])
    userId   String?
    Category Category[]
}

model Category {
    id    String @id @default(uuid())
    name  String
    color String

    bill   Bill   @relation(fields: [billId], references: [id])
    billId String

    created_at DateTime @default(now())
    updated_at DateTime @default(now())
}

model Installment {
    id         String   @id @default(uuid())
    value      Float    @default(0)
    date       DateTime @default(now())
    payed      Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @default(now())

    Bill   Bill?   @relation(fields: [billId], references: [id])
    billId String?
}
